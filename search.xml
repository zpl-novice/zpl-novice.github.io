<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言知识强化</title>
    <url>/2020/01/11/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BC%BA%E5%8C%96/</url>
    <content><![CDATA[<p>摘要：对已经学习过的C语言知识中一些比较特殊的地方进行强化记忆，主要有强制转换、全局变量、指针函数和函数指针、静态局部变量以及结构体等方面。</p>
<a id="more"></a>

<p>在本篇博客里我将会对C语言中的一些知识进行再次介绍，这些知识对以后的学习也很有帮助。</p>
<h2 id="1-强制转换"><a href="#1-强制转换" class="headerlink" title="1.强制转换"></a>1.强制转换</h2><p>C语言中的强制转换即在变量前面用括号声明你想要转换成的类型，这种方法简单实用，但是却无法说明转换的安全性。举例如下（将float类型的变量c转换为int型）：</p>
<pre><code>float c=2.5;
cout&lt;&lt;(int)c;</code></pre><p>这种情况下输出的值为2，也可以看出在编译器里不是四舍五入的。前面提到过转换的安全性，即强制类型转换是有风险的不是想转换就能随便转换的，在后面C++知识的学习中，将会有一节专门讲强制类型转换，依靠<code>static_cast</code>、<code>interpret_cast</code>、<code>const_cast</code>、 <code>dynamic_cast</code>四种，它们比C语言的这种更加安全和功能具体。</p>
<h2 id="2-全局变量"><a href="#2-全局变量" class="headerlink" title="2.全局变量"></a>2.全局变量</h2><p>变量分为局部与全局，局部变量又可称之为内部变量。由某对象或某个函数所创建的变量通常都是局部变量，只能被内部引用，而无法被其它对象或函数引用。<br>全局变量既可以是某对象函数创建，也可以是在本程序任何地方创建。全局变量是可以被本程序所有对象或函数引用。只有定义为全局变量，void子函数作用的值才会传递到main函数里。定义完全局变量后，函数里就不再定义。</p>
<pre><code>void exchange(int m,int n)
{
    int p=0;
    p=m;m=n;n=p;
}
int main()
{
    int a,b;
    cin&gt;&gt;a&gt;&gt;b;
    exchange(a,b);
    cout&lt;&lt;a&lt;&lt;endl&lt;&lt;b;
    return 0;
}</code></pre><p>在上面的例子中，a、b的值并不会被交换，这是因为a、b并没有真的被传递到exchange函数中，且函数并没有返回值，也不会改变主函数中的a、b。如果我们定义a、b为全局变量，如下则可实现功能：</p>
<pre><code>int a,b;
void exchange()
{
    int p=0;
    p=a;a=b;b=p;
}
int main()
{
    cin&gt;&gt;a&gt;&gt;b;
    exchange();
    cout&lt;&lt;a&lt;&lt;endl&lt;&lt;b;
    return 0;
}</code></pre><p>这时，主函数以及exchange函数中的a、b都为全局变量定义的a、b，会随之改变。需要强调的一点是，当一个变量既是局部变量又是全局变量时，局部变量会屏蔽作用范围的全局变量。由于在C++中引入了类的概念，变量被封装在类中，对别的类不可见，相当于抛弃了全局变量。</p>
<h2 id="3-指针函数和函数指针"><a href="#3-指针函数和函数指针" class="headerlink" title="3.指针函数和函数指针"></a>3.指针函数和函数指针</h2><p>指针是指向变量的地址。指针一般与数组用在一起。数组名也相当于指向数组第一个元素的指针，但是它不能被改变。指针函数的意思是函数传入的参数为指针变量。如<code>void change(int *p)</code>，当我们调用指针函数时直接把指针当参数输入即可<code>change(p)</code>。函数指针指的是一个函数它的返回值是指针类型的。即<code>int *p(int x,int y)</code>。</p>
<h2 id="4-静态局部变量"><a href="#4-静态局部变量" class="headerlink" title="4.静态局部变量"></a>4.静态局部变量</h2><p>静态局部变量的关键字为<code>static</code>，静态局部变量在函数里定义，但是它跟局部变量不同，局部变量会随着函数的结束而释放，当静态局部变量不会，它只定义一次，而且不会被重新赋值和消失直到整个程序结束。</p>
<pre><code>void a()
{
    int a=0;
    static int b=0;
    a=a+1;
    b=b+1;
    cout&lt;&lt;a&lt;&lt;endl&lt;&lt;b&lt;&lt;endl;
}
int main()
{
    int i=0;
    for(i=0;i&lt;4;i++)
    {
        a();
    }
    return 0;
}</code></pre><p>a的输出结果为1、1、1、1，b的输出结果为1、2、3、4。产生这种差别的原因就是a不是静态局部变量，当a函数结束，a也消失，而b不会消失，依然保持着自己的值。当再次调用a函数时，a重新被赋值为0，但b却不在赋值，它只会在第一次调用时赋值一次，因此b随着循环每次加1，而a总是变成0再加1。</p>
<h2 id="5-结构体"><a href="#5-结构体" class="headerlink" title="5.结构体"></a>5.结构体</h2><p>结构体的关键字是<code>struct</code>，需要注意的是在C++中也有这个关键字，但是不再表示结构体，而是类，会在以后的学习中介绍。C语言中的结构体主要是把多个有关系的变量写在一个结构里，便于调用和赋值。如下所示：    </p>
<pre><code>struct student
{ 
    int id-num;
    Int name[10];
}; </code></pre><p>定义了一个学生的结构体，其中有学生的名字和学号，当调用时：</p>
<pre><code>student  mike；  
mike.id-num=123;
mike.name[10]=mike;</code></pre><p>C语言中还有很多的知识和技巧，这里就不再一一列述。在接下来会进入到C++基础知识的学习。加油！</p>
]]></content>
      <categories>
        <category>C++知识学习</category>
      </categories>
  </entry>
  <entry>
    <title>博客初识</title>
    <url>/2020/01/10/%E5%8D%9A%E5%AE%A2%E5%88%9D%E5%A7%8B/</url>
    <content><![CDATA[<p>开始尝试写博客啦</p>
<a id="more"></a>

<h2 id="很开心成功搭建了博客并开始初次尝试写博客，我会将已经学习过、正在学习和即将要学习的东西都整理记录在博客上。我把签名改为进阶之路（Advanced-road-，也希望我的水平不断提高。"><a href="#很开心成功搭建了博客并开始初次尝试写博客，我会将已经学习过、正在学习和即将要学习的东西都整理记录在博客上。我把签名改为进阶之路（Advanced-road-，也希望我的水平不断提高。" class="headerlink" title="很开心成功搭建了博客并开始初次尝试写博客，我会将已经学习过、正在学习和即将要学习的东西都整理记录在博客上。我把签名改为进阶之路（Advanced road)，也希望我的水平不断提高。"></a>很开心成功搭建了博客并开始初次尝试写博客，我会将已经学习过、正在学习和即将要学习的东西都整理记录在博客上。我把签名改为进阶之路（Advanced road)，也希望我的水平不断提高。</h2><pre><code>#include&lt;iostream&gt;
using namespace std;
int main()
{
    cout&lt;&lt;&quot;Hello,world!&quot;;
    return 0;
}</code></pre>]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/09/hello-world/</url>
    <content><![CDATA[<p>Welcome!</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
</search>
